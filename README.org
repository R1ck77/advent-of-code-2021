
My solutions for the Advent of Code 2021, in Emacs LISP (or this is the plan. Let's see how it unfolds…)

** How to install the code

Just clone the repository: it doesn't require any setup at all.

** What do you need

- Emacs (obviously) with the following packages installed:
  - buttercup
  - dash
- make (optionally)

** How to run the samples

The code is organized in "day" files representing the solutions of each part of a specific day, each one contains 2 functions computing the solution for the first part and the second part, like:

#+begin_src elisp
(day/part-1 blocks)
#+end_src elisp

or 

#+begin_src elisp
(day5/part-2 lines)
#+end_src elisp

where the first require blocks of lines and the second a single list of lines.

This inconsistency in the type of the argument was introduced for my convenience, anyway the input format is always simple and can be deducted from the argument name or the test:  it's usually lines, numbers or block of lines.

There are buttercup tests that will run my solution for each day against the example provided with the description and my personal input.

To run the tests which ensure that all solutions reproduce the expected results you can either type:

#+begin_src shell
make
#+end_src

if you have make installed, otherwise you can execute:

#+begin_src shell
emacs --eval "(setq load-path (cons \".\" load-path))" -batch -f package-initialize -f buttercup-run-discover
#+end_src

*Keep in mind that some tests are rather slow*: due to the lack of sorted tables for instance, day 15 takes more than 10' on my machine.

If you want to compute the solution against your own input:

1. overwrite the data file for the day of interest in the  =data= directory with your own problem input
2. run the test with buttercup

The execution will fail and buttercup will print a message with the expected result (my solution) and the solution of your input (the number you want).

Another way is to load the buffer with the specific day, and compute the solution manually (e.g. using *ielm*).

Keep in mind that, in order to load the el files, you need to have the =load-path= configured to include the current directory:

#+begin_src elisp
(setq load-path (cons "." load-path))
#+end_src

Then you can do something like this:

#+begin_src elisp
(require 'day3)
(day3/part-2 '("00100" "11110" "10110" "10111" 
               "10101" "01111" "00111" "11100"
               "10000" "11001" "00010" "01010"))
#+end_src

But, obviously, if you are on this repository, you are the kind of /connoisseur/ who doesn't need detailed instructions… :)

*** Day 5

As a bonus, =day5.el= defines two commands: =day5/show-part2-example= and =day5/show-part2-problem=.

Executing them will reproduce the input for the example (small fast) and the problem (very large and slow) in an emacs buffer.

In the first case, it should print:

#+begin_example
1 1    11
 111   2
  2 1 111
   1 2 2
 112313211
   1 2
  1   1
 1     1
1       1
222111          
#+end_example

where in the second one, a very large buffer will contain my own input.
